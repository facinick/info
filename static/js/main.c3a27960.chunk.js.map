{"version":3,"sources":["serviceWorkerRegistration.ts","stores/provider.tsx","stores/navigation_store.ts","styles/theme.ts","stores/theme_store.ts","stores/code_store.ts","stores/root_store.ts","components/HelloWorld.tsx","components/Codes.tsx","components/App.tsx","reportWebVitals.ts","index.tsx","stores/hyderation_data.ts"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","process","PUBLIC_URL","URL","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","store","NavigationStore","root","currentPage","setPage","page","this","makeObservable","hydrate","action","observable","data","defaultPage","lightTheme","createTheme","palette","mode","primary","main","secondary","background","default","paper","text","shape","borderRadius","darkTheme","ThemeStore","theme","setMode","CodeStore","codes","RootStore","themeStore","codeStore","navigationStore","themeStoreInit","codeStoreInit","navigationStoreInit","enableStaticRendering","StoreContext","createContext","undefined","useRootStore","context","useContext","Error","RootStoreProvider","children","initialData","_store","initializeStore","hydrationData","Provider","value","displayName","HelloWorld","CodesComponent","observer","rows","toJS","length","columns","Object","keys","map","columnName","field","headerName","style","width","TableContainer","justifyContent","display","component","Paper","Table","size","sx","minWidth","maxWidth","TableHead","TableRow","column","TableCell","TableBody","row","align","id","place","code","App","ThemeProvider","className","CssBaseline","Box","position","color","top","bottom","BottomNavigation","showLabels","onChange","event","newValue","BottomNavigationAction","label","icon","marginLeft","alignItems","right","padding","backgroundColor","IconButton","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configure","useProxies","ReactDOM","render","StrictMode","document","getElementById","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c3a27960.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        if (process?.env?.PUBLIC_URL) {\n            const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n            if (publicUrl.origin !== window.location.origin) {\n                // Our service worker won't work if PUBLIC_URL is on a different origin\n                // from what our page is served on. This might happen if a CDN is used to\n                // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n                return;\n            }\n\n            window.addEventListener('load', () => {\n                const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n                if (isLocalhost) {\n                    // This is running on localhost. Let's check if a service worker still exists or not.\n                    checkValidServiceWorker(swUrl, config);\n\n                    // Add some additional logging to localhost, pointing developers to the\n                    // service worker/PWA documentation.\n                    navigator.serviceWorker.ready.then(() => {\n                        console.log(\n                            'This web app is being served cache-first by a service ' +\n                                'worker. To learn more, visit https://cra.link/PWA',\n                        );\n                    });\n                } else {\n                    // Is not localhost. Just register service worker\n                    registerValidSW(swUrl, config);\n                }\n            });\n        }\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://cra.link/PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import { enableStaticRendering } from 'mobx-react-lite';\nimport React, { createContext, ReactNode, useContext } from 'react';\nimport { CodeStore } from './code_store';\nimport { NavigationStore } from './navigation_store';\nimport { RootStore, RootStoreHydration } from './root_store';\nimport { ThemeStore } from './theme_store';\n\nenableStaticRendering(typeof window === 'undefined');\n\nlet store: RootStore;\nconst StoreContext: React.Context<RootStore | undefined> = createContext<RootStore | undefined>(undefined);\nStoreContext.displayName = 'StoreContext';\n\nexport function useRootStore(): RootStore {\n    const context = useContext(StoreContext);\n    if (context === undefined) {\n        throw new Error('useRootStore must be used within RootStoreProvider');\n    }\n\n    return context;\n}\n\nexport function useThemeStore(): ThemeStore {\n    const { themeStore } = useRootStore();\n    return themeStore;\n}\n\nexport function useCodeStore(): CodeStore {\n    const { codeStore } = useRootStore();\n    return codeStore;\n}\n\nexport function useNavigationStore(): NavigationStore {\n    const { navigationStore } = useRootStore();\n    return navigationStore;\n}\n\nexport function RootStoreProvider({\n    children,\n    hydrationData,\n}: {\n    children: ReactNode;\n    hydrationData?: RootStoreHydration;\n}): JSX.Element {\n    const store = initializeStore(hydrationData);\n\n    return <StoreContext.Provider value={store}> {children} </StoreContext.Provider>;\n}\n\nfunction initializeStore(initialData?: RootStoreHydration): RootStore {\n    const _store = store ?? new RootStore();\n\n    if (initialData) {\n        console.log(`LOG: store initializing data:`, initialData);\n        _store.hydrate(initialData);\n    }\n    // For SSG and SSR always create a new store\n    if (typeof window === 'undefined') return _store;\n    // Create the store once in the client\n    if (!store) store = _store;\n\n    return _store;\n}\n","import { action, makeObservable, observable } from 'mobx';\nimport { Store } from './interface';\nimport { RootStore } from './root_store';\n\nexport type NavigationStoreInit = {\n    defaultPage: number;\n};\n\nexport class NavigationStore implements Store {\n    root: RootStore;\n    currentPage: number = 0;\n\n    constructor(root: RootStore) {\n        this.root = root;\n        makeObservable(this, {\n            hydrate: action,\n            setPage: action,\n            currentPage: observable,\n        });\n    }\n\n    setPage = ({ page }: { page: number }) => {\n        this.currentPage = page;\n    };\n\n    hydrate(data: { defaultPage: number }): void {\n        this.currentPage = data.defaultPage;\n    }\n}\n","import { PaletteMode } from '@mui/material';\nimport { createTheme, ThemeOptions } from '@mui/material/styles';\n\nexport const lightThemeOptions: ThemeOptions = {\n    palette: {\n        mode: 'light' as PaletteMode,\n        primary: {\n            main: '#d32f2f',\n        },\n        secondary: {\n            main: '#263238',\n        },\n        background: {\n            default: '#FAFAFA',\n            paper: '#FFFFFF',\n        },\n        text: {\n            primary: 'rgba(0, 0, 0, 0.87)',\n        },\n    },\n    shape: {\n        borderRadius: 4,\n    },\n};\n\nexport const darkThemeOptions: ThemeOptions = {\n    palette: {\n        mode: 'dark' as PaletteMode,\n        primary: {\n            main: '#d32f2f',\n        },\n        secondary: {\n            main: '#dcdcdc',\n        },\n        background: {\n            default: '#1e1e1e',\n            paper: '#2b2b2b',\n        },\n        text: {\n            primary: '#FFFFFF',\n        },\n    },\n    shape: {\n        borderRadius: 4,\n    },\n};\n\nexport const lightTheme = createTheme(lightThemeOptions);\nexport const darkTheme = createTheme(darkThemeOptions);\n","import { action, makeObservable, observable } from 'mobx';\nimport { RootStore } from './root_store';\nimport { Theme } from '@mui/material/styles';\nimport { lightTheme, darkTheme } from '../styles/theme';\nimport { Store } from './interface';\n\nexport type ITheme = 'light' | 'dark';\n\nexport type ThemeStoreInit = {\n    mode: ITheme;\n};\n\nexport class ThemeStore implements Store {\n    root: RootStore;\n    mode: ITheme = 'dark';\n    theme: Theme = darkTheme;\n\n    constructor(root: RootStore) {\n        this.root = root;\n        makeObservable(this, {\n            hydrate: action,\n            mode: observable,\n            theme: observable,\n            setMode: action,\n        });\n    }\n\n    setMode = ({ mode }: { mode: ITheme }): void => {\n        this.mode = mode;\n        if (this.mode === 'light') {\n            this.theme = lightTheme;\n        } else if (this.mode === 'dark') {\n            this.theme = darkTheme;\n        }\n    };\n\n    hydrate(data: { mode: ITheme }): void {\n        this.mode = data.mode;\n\n        if (this.mode === 'light') {\n            this.theme = lightTheme;\n        } else if (this.mode === 'dark') {\n            this.theme = darkTheme;\n        }\n    }\n}\n","import { action, makeObservable, observable } from 'mobx';\nimport { RootStore } from './root_store';\nimport codes from '../constants/codes.json';\nimport { Store } from './interface';\n\nexport type CodeStoreInit = {};\n\ninterface Code {\n    id: number;\n    place: string;\n    code: number;\n}\n\nexport class CodeStore implements Store {\n    root: RootStore;\n    codes: Array<Code> = codes;\n\n    constructor(root: RootStore) {\n        this.root = root;\n        makeObservable(this, {\n            hydrate: action,\n            codes: observable,\n        });\n    }\n\n    hydrate(data: CodeStoreInit): void {\n        return;\n    }\n}\n","import { NavigationStore, NavigationStoreInit } from './navigation_store';\nimport { ThemeStoreInit, ThemeStore } from './theme_store';\nimport { CodeStore, CodeStoreInit } from './code_store';\n\nexport type RootStoreHydration = {\n    themeStoreInit: ThemeStoreInit;\n    codeStoreInit: CodeStoreInit;\n    navigationStoreInit: NavigationStoreInit;\n};\nexport class RootStore {\n    themeStore: ThemeStore;\n    codeStore: CodeStore;\n    navigationStore: NavigationStore;\n\n    constructor() {\n        this.themeStore = new ThemeStore(this);\n        this.codeStore = new CodeStore(this);\n        this.navigationStore = new NavigationStore(this);\n    }\n\n    hydrate(data: RootStoreHydration): void {\n        this.themeStore.hydrate(data.themeStoreInit);\n        this.codeStore.hydrate(data.codeStoreInit);\n        this.navigationStore.hydrate(data.navigationStoreInit);\n    }\n}\n","export const HelloWorld = (): JSX.Element => {\n    return <h3>Hello World</h3>;\n};\n","import * as React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { useCodeStore } from '../stores/provider';\nimport { toJS } from 'mobx';\nimport { TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody } from '@mui/material';\n\nexport const CodesComponent = observer(function CodesComponent() {\n    const codeStore = useCodeStore();\n\n    const rows = toJS(codeStore.codes);\n\n    if (rows.length === 0) {\n        return null;\n    }\n\n    const columns = Object.keys(rows[0]).map((columnName: string) => {\n        return {\n            field: columnName,\n            headerName: columnName,\n        };\n    });\n\n    return (\n        <div style={{ width: '100%' }}>\n            <TableContainer style={{ justifyContent: 'center', display: 'flex' }} component={Paper}>\n                <Table size=\"small\" sx={{ minWidth: 280, maxWidth: 560 }} aria-label=\"codes table\">\n                    <TableHead>\n                        <TableRow>\n                            {columns.map(column => {\n                                return <TableCell key={column.headerName}>{column.headerName}</TableCell>;\n                            })}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.map(row => (\n                            <TableRow key={row.id}>\n                                <TableCell align=\"left\">{row.id}</TableCell>\n                                <TableCell align=\"left\">{row.place}</TableCell>\n                                <TableCell align=\"left\">{row.code}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    );\n});\n","import React from 'react';\nimport '../styles/App.scss';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport { observer } from 'mobx-react-lite';\nimport { BottomNavigation, BottomNavigationAction, Box, CssBaseline, IconButton, ThemeProvider } from '@mui/material';\nimport { useNavigationStore, useThemeStore } from '../stores/provider';\nimport { HelloWorld } from './HelloWorld';\nimport LockIcon from '@mui/icons-material/Lock';\n// import FavoriteIcon from '@mui/icons-material/Favorite';\nimport HomeIcon from '@mui/icons-material/Home';\nimport { CodesComponent } from './Codes';\nimport DarkMode from '@mui/icons-material/DarkMode';\nimport LightMode from '@mui/icons-material/LightMode';\n\nconst App = observer(function App() {\n    const { theme, mode, setMode } = useThemeStore();\n    const { currentPage, setPage } = useNavigationStore();\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className=\"App\">\n                <CssBaseline />\n                <HelloWorld />\n\n                {currentPage === 0 && <CodesComponent />}\n\n                <Box position=\"fixed\" color=\"primary\" sx={{ width: '100%', top: 'auto', bottom: 0, display: 'flex' }}>\n                    <BottomNavigation\n                        sx={{ width: '100%' }}\n                        showLabels\n                        value={currentPage}\n                        onChange={(event, newValue) => {\n                            setPage({ page: newValue });\n                        }}\n                    >\n                        <BottomNavigationAction label=\"Codes\" icon={<LockIcon />} />\n                        <BottomNavigationAction label=\"Home\" icon={<HomeIcon />} />\n                    </BottomNavigation>\n                    <Box\n                        sx={{\n                            // position: 'absolute',\n                            marginLeft: 'auto',\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                            top: 0,\n                            bottom: 0,\n                            right: 0,\n                            padding: '8px',\n                            backgroundColor: 'background.paper',\n                        }}\n                    >\n                        {mode === 'light' && (\n                            <IconButton\n                                // sx={{ marginLeft: 'auto' }}\n                                onClick={() => setMode({ mode: 'dark' })}\n                                color=\"secondary\"\n                                aria-label=\"enable dark mode\"\n                                // component=\"span\"\n                            >\n                                <DarkMode />\n                            </IconButton>\n                        )}\n\n                        {mode === 'dark' && (\n                            <IconButton\n                                onClick={() => setMode({ mode: 'light' })}\n                                color=\"secondary\"\n                                aria-label=\"enable dark mode\"\n                                // component=\"span\"\n                            >\n                                <LightMode />\n                            </IconButton>\n                        )}\n                    </Box>\n                </Box>\n            </div>\n        </ThemeProvider>\n    );\n});\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { configure } from 'mobx';\nimport { RootStoreProvider } from './stores/provider';\nimport { hyderationData } from './stores/hyderation_data';\nconfigure({ useProxies: 'never' });\n\nReactDOM.render(\n    <React.StrictMode>\n        <RootStoreProvider hydrationData={hyderationData}>\n            <App />\n        </RootStoreProvider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { RootStoreHydration } from './root_store';\n\nexport const hyderationData: RootStoreHydration = {\n    themeStoreInit: {\n        mode: 'dark',\n    },\n    codeStoreInit: {},\n    navigationStoreInit: {\n        defaultPage: 0,\n    },\n};\n"],"sourceRoot":""}